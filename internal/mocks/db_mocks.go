// Code generated by MockGen. DO NOT EDIT.
// Source: slash10k/internal/db (interfaces: Database,Connection,Queries,Transaction)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/db_mocks.go -package=mock_db slash10k/internal/db Database,Connection,Queries,Transaction
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	db "slash10k/internal/db"
	sqlc "slash10k/sql/gen"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDatabase) Connect(arg0 context.Context, arg1 string) (db.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(db.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseMockRecorder) Connect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabase)(nil).Connect), arg0, arg1)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close), arg0)
}

// Queries mocks base method.
func (m *MockConnection) Queries() db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queries")
	ret0, _ := ret[0].(db.Queries)
	return ret0
}

// Queries indicates an expected call of Queries.
func (mr *MockConnectionMockRecorder) Queries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queries", reflect.TypeOf((*MockConnection)(nil).Queries))
}

// StartTransaction mocks base method.
func (m *MockConnection) StartTransaction(arg0 context.Context) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", arg0)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockConnectionMockRecorder) StartTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockConnection)(nil).StartTransaction), arg0)
}

// MockQueries is a mock of Queries interface.
type MockQueries struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesMockRecorder
}

// MockQueriesMockRecorder is the mock recorder for MockQueries.
type MockQueriesMockRecorder struct {
	mock *MockQueries
}

// NewMockQueries creates a new mock instance.
func NewMockQueries(ctrl *gomock.Controller) *MockQueries {
	mock := &MockQueries{ctrl: ctrl}
	mock.recorder = &MockQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueries) EXPECT() *MockQueriesMockRecorder {
	return m.recorder
}

// AddJournalEntry mocks base method.
func (m *MockQueries) AddJournalEntry(arg0 context.Context, arg1 sqlc.AddJournalEntryParams) (sqlc.DebtJournal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJournalEntry", arg0, arg1)
	ret0, _ := ret[0].(sqlc.DebtJournal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJournalEntry indicates an expected call of AddJournalEntry.
func (mr *MockQueriesMockRecorder) AddJournalEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJournalEntry", reflect.TypeOf((*MockQueries)(nil).AddJournalEntry), arg0, arg1)
}

// AddPlayer mocks base method.
func (m *MockQueries) AddPlayer(arg0 context.Context, arg1 string) (sqlc.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockQueriesMockRecorder) AddPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockQueries)(nil).AddPlayer), arg0, arg1)
}

// DeleteJournalEntry mocks base method.
func (m *MockQueries) DeleteJournalEntry(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJournalEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJournalEntry indicates an expected call of DeleteJournalEntry.
func (mr *MockQueriesMockRecorder) DeleteJournalEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJournalEntry", reflect.TypeOf((*MockQueries)(nil).DeleteJournalEntry), arg0, arg1)
}

// DeletePlayer mocks base method.
func (m *MockQueries) DeletePlayer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockQueriesMockRecorder) DeletePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockQueries)(nil).DeletePlayer), arg0, arg1)
}

// GetAllDebts mocks base method.
func (m *MockQueries) GetAllDebts(arg0 context.Context) ([]sqlc.GetAllDebtsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDebts", arg0)
	ret0, _ := ret[0].([]sqlc.GetAllDebtsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDebts indicates an expected call of GetAllDebts.
func (mr *MockQueriesMockRecorder) GetAllDebts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDebts", reflect.TypeOf((*MockQueries)(nil).GetAllDebts), arg0)
}

// GetBotSetup mocks base method.
func (m *MockQueries) GetBotSetup(arg0 context.Context) (sqlc.BotSetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotSetup", arg0)
	ret0, _ := ret[0].(sqlc.BotSetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotSetup indicates an expected call of GetBotSetup.
func (mr *MockQueriesMockRecorder) GetBotSetup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotSetup", reflect.TypeOf((*MockQueries)(nil).GetBotSetup), arg0)
}

// GetDebt mocks base method.
func (m *MockQueries) GetDebt(arg0 context.Context, arg1 pgtype.Int4) (sqlc.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebt", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebt indicates an expected call of GetDebt.
func (mr *MockQueriesMockRecorder) GetDebt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebt", reflect.TypeOf((*MockQueries)(nil).GetDebt), arg0, arg1)
}

// GetIdOfPlayer mocks base method.
func (m *MockQueries) GetIdOfPlayer(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdOfPlayer", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdOfPlayer indicates an expected call of GetIdOfPlayer.
func (mr *MockQueriesMockRecorder) GetIdOfPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdOfPlayer", reflect.TypeOf((*MockQueries)(nil).GetIdOfPlayer), arg0, arg1)
}

// GetJournalEntries mocks base method.
func (m *MockQueries) GetJournalEntries(arg0 context.Context, arg1 pgtype.Int4) ([]sqlc.DebtJournal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalEntries", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.DebtJournal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJournalEntries indicates an expected call of GetJournalEntries.
func (mr *MockQueriesMockRecorder) GetJournalEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalEntries", reflect.TypeOf((*MockQueries)(nil).GetJournalEntries), arg0, arg1)
}

// NumberOfPlayers mocks base method.
func (m *MockQueries) NumberOfPlayers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfPlayers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfPlayers indicates an expected call of NumberOfPlayers.
func (mr *MockQueriesMockRecorder) NumberOfPlayers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfPlayers", reflect.TypeOf((*MockQueries)(nil).NumberOfPlayers), arg0)
}

// PutBotSetup mocks base method.
func (m *MockQueries) PutBotSetup(arg0 context.Context, arg1 sqlc.PutBotSetupParams) (sqlc.BotSetup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBotSetup", arg0, arg1)
	ret0, _ := ret[0].(sqlc.BotSetup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBotSetup indicates an expected call of PutBotSetup.
func (mr *MockQueriesMockRecorder) PutBotSetup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBotSetup", reflect.TypeOf((*MockQueries)(nil).PutBotSetup), arg0, arg1)
}

// SetDebt mocks base method.
func (m *MockQueries) SetDebt(arg0 context.Context, arg1 sqlc.SetDebtParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDebt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDebt indicates an expected call of SetDebt.
func (mr *MockQueriesMockRecorder) SetDebt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebt", reflect.TypeOf((*MockQueries)(nil).SetDebt), arg0, arg1)
}

// UpdateJournalEntry mocks base method.
func (m *MockQueries) UpdateJournalEntry(arg0 context.Context, arg1 sqlc.UpdateJournalEntryParams) (sqlc.DebtJournal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJournalEntry", arg0, arg1)
	ret0, _ := ret[0].(sqlc.DebtJournal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJournalEntry indicates an expected call of UpdateJournalEntry.
func (mr *MockQueriesMockRecorder) UpdateJournalEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJournalEntry", reflect.TypeOf((*MockQueries)(nil).UpdateJournalEntry), arg0, arg1)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), arg0)
}

// Queries mocks base method.
func (m *MockTransaction) Queries() db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queries")
	ret0, _ := ret[0].(db.Queries)
	return ret0
}

// Queries indicates an expected call of Queries.
func (mr *MockTransactionMockRecorder) Queries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queries", reflect.TypeOf((*MockTransaction)(nil).Queries))
}
